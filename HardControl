#include <EncButton.h>
EncButton<EB_TICK, 2, 3, 4> enc(INPUT);
EncButton<EB_TICK, 12> btn(INPUT_PULLUP);

#include <Wire.h>
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x3f, 20, 4);

#define motor1 6
#define motor2 7
#define water_valve 8
#define air_valve 9

void uptime(uint16_t sec_count);

void setup() {

  lcd.init();
  lcd.backlight();

  pinMode(motor1, OUTPUT);
  pinMode(motor2, OUTPUT);
  pinMode(water_valve, OUTPUT);
  pinMode(air_valve, OUTPUT);

}

void loop() {

  enc.tick();
  btn.tick();

  static bool wash_start = false;
  static bool dry_start = false;
  static uint32_t wash_timer;
  static uint32_t dry_timer;
  static uint16_t uptime_sec_count;
  if (btn.isClick()) {
    wash_timer = millis();
    uptime_sec_count = 0;
    digitalWrite(motor1, HIGH);
    digitalWrite(motor2, HIGH);
    digitalWrite(water_valve, HIGH);
    wash_start = true;
    dry_start = false;
  }
  static uint32_t wash_time = 20000;
  if (wash_start == true && millis() - wash_timer >= wash_time) {
    digitalWrite(motor1, LOW);
    digitalWrite(motor2, LOW);
    digitalWrite(water_valve, LOW);
    digitalWrite(air_valve, HIGH);
    wash_start = false;
    dry_start = true;
    dry_timer = millis();
  }
  static uint16_t dry_time = 15000;
  if (dry_start == true && millis() - dry_timer >= dry_time) {
    digitalWrite(air_valve, LOW);
    dry_start = false;
  }

  static uint32_t uptime_tmr;
  if (wash_start == true || dry_start == true) {
    if (millis() - uptime_tmr >= 1000) {
      uptime_tmr = millis();
      ++uptime_sec_count;
    }
  }
  static uint32_t upd_tmr;
  static uint8_t column = 1;
  static bool print_names_flag = true;
  uint8_t wash_time_print = wash_time / 1000;
  if (millis() - upd_tmr >= 100) {
    upd_tmr = millis();
    lcd.setCursor(column, 0);
    if (print_names_flag == true) lcd.print(F("Wash:  "));
    lcd.print(digitalRead(motor1) ? F("on ") : F("off"));
    lcd.setCursor(13, 0);
    lcd.print(wash_time_print);
    if (print_names_flag == true) lcd.print(F(" sec"));
    lcd.setCursor(column, 1);
    if (print_names_flag == true) lcd.print(F("Dry:   "));
    lcd.print(digitalRead(air_valve) ? F("on ") : F("off"));
    //lcd.setCursor(13, 1);
    //lcd.print();
    //if (print_names_flag == true) lcd.print(F(" sec"));
    lcd.setCursor(column, 2);
    if (print_names_flag == true) lcd.print(F("Water: "));
    lcd.print(digitalRead(water_valve) ? F("on  ") : F("off "));
    if (print_names_flag == true) lcd.print(F("Air: "));
    lcd.setCursor(17, 2);
    lcd.print(digitalRead(air_valve) ? F("on  ") : F("off "));
    lcd.setCursor(column, 3);
    if (print_names_flag == true) lcd.print(F("Time:  "));
    uptime(uptime_sec_count);
    if (print_names_flag == true) {
      lcd.setCursor(17, 3);
      lcd.print(F("rst"));
    }
    if (print_names_flag == true) {
      column = 8;
      print_names_flag = false;
    }
  }

  static uint8_t cursor_string = 0;
  static uint8_t cursor_column = 0;
  static bool main_menu = true;
  if (main_menu) {
    if (enc.isLeft()) cursor_string = constrain(cursor_string - 1, 0, 3);
    if (enc.isRight()) cursor_string = constrain(cursor_string + 1, 0, 3);
    lcd.setCursor(cursor_column, cursor_string);
    lcd.write(126);
  }
  static uint8_t pre_cursor_string = 0;
  if (pre_cursor_string != cursor_string) {
    lcd.setCursor (cursor_column, pre_cursor_string);
    lcd.print(" ");
    pre_cursor_string = cursor_string;
  }
  static uint8_t pre_cursor_column = 0;
  if (pre_cursor_column != cursor_column) {
    lcd.setCursor (pre_cursor_column, cursor_string);
    lcd.print(" ");
    pre_cursor_column = cursor_column;
  }
  static bool menu_item_available = true;
  static bool menu_item_enter = false;
  static bool menu_sub_item_enter = false;
  switch (cursor_string) {
    case (0): {
        if (menu_item_available == true && enc.isClick()) {
          cursor_column = 12;
          lcd.setCursor(cursor_column, cursor_string);
          lcd.write(126);
          main_menu = false;
          menu_item_available = false;
          menu_item_enter = true;
        }
        if (menu_item_enter == true) {
          if (enc.isLeft()) wash_time = constrain(wash_time - 20000, 20000, 60000);
          if (enc.isRight()) wash_time = constrain(wash_time + 20000, 20000, 60000);
        }
        if (enc.isHolded()) {
          cursor_column = 0;
          main_menu = true;
          menu_item_available = true;
          menu_item_enter = false;
        }
      }
      break;
    case (1): {
        if (menu_item_available == true && enc.isClick()) {
          cursor_column = 7;
          lcd.setCursor(cursor_column, cursor_string);
          lcd.write(126);
          main_menu = false;
          menu_item_available = false;
          menu_item_enter = true;
        }
        if (menu_item_enter == true) {
          if (enc.isClick()) {
            dry_timer = millis();
            uptime_sec_count = 0;
            dry_start = true;
            digitalWrite(air_valve, HIGH);
          }
        }
        if (enc.isHolded()) {
          cursor_column = 0;
          main_menu = true;
          menu_item_available = true;
          menu_item_enter = false;
        }
      }
      break;
    case (2): {
        if (menu_item_available == true && enc.isClick()) {
          cursor_column = 7;
          lcd.setCursor(cursor_column, cursor_string);
          lcd.write(126);
          main_menu = false;
          menu_item_available = false;
          menu_item_enter = true;
        }
        if (menu_item_enter == true) {

        }
        if (enc.isHolded()) {
          cursor_column = 0;
          main_menu = true;
          menu_item_available = true;
          menu_item_enter = false;
        }
      }
      break;
    case (3): {
        if (menu_item_available == true && enc.isClick()) {
          cursor_column = 16;
          lcd.setCursor(cursor_column, cursor_string);
          lcd.write(126);
          main_menu = false;
          menu_item_available = false;
          menu_item_enter = true;
        }
        if (menu_item_enter == true) {
          if (enc.isClick()) {
            uptime_sec_count = 0;
            digitalWrite(motor1, LOW);
            digitalWrite(motor2, LOW);
            digitalWrite(water_valve, LOW);
            digitalWrite(air_valve, LOW);
            wash_start = false;
            dry_start = false;
          }
          if (menu_sub_item_enter == true) {

            switch (cursor_column) {
              case (8): {

                }
                break;
              case (13): {

                }
                break;
            }
          }
        }
        if (menu_sub_item_enter == false && enc.isHolded()) {
          cursor_column = 0;
          main_menu = true;
          menu_item_available = true;
          menu_item_enter = false;
        }
      }
      break;
  }

}


void uptime(uint16_t sec_count) {
  uint8_t min_count = sec_count / 60;
  //uint8_t this_hour = sec_count / 3600;
  //lcd.print(this_hour);
  //lcd.print(":");
  uint8_t this_min = min_count % 60;
  //if (this_min < 10) lcd.print(0);
  lcd.print(this_min);
  lcd.print(":");
  byte this_sec = sec_count % 60;
  if (this_sec < 10) lcd.print(0);
  lcd.print(this_sec);
}
